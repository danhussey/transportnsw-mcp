# coding: utf-8

"""
    Trip Planner

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 10.2.1.42
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class HttpErrorResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'error_date_time': 'str',
        'message': 'str',
        'requested_method': 'str',
        'requested_url': 'str',
        'transaction_id': 'str'
    }

    attribute_map = {
        'error_date_time': 'ErrorDateTime',
        'message': 'Message',
        'requested_method': 'RequestedMethod',
        'requested_url': 'RequestedUrl',
        'transaction_id': 'TransactionId'
    }

    def __init__(self, error_date_time=None, message=None, requested_method=None, requested_url=None, transaction_id=None, _configuration=None):  # noqa: E501
        """HttpErrorResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._error_date_time = None
        self._message = None
        self._requested_method = None
        self._requested_url = None
        self._transaction_id = None
        self.discriminator = None

        if error_date_time is not None:
            self.error_date_time = error_date_time
        if message is not None:
            self.message = message
        if requested_method is not None:
            self.requested_method = requested_method
        if requested_url is not None:
            self.requested_url = requested_url
        if transaction_id is not None:
            self.transaction_id = transaction_id

    @property
    def error_date_time(self):
        """Gets the error_date_time of this HttpErrorResponse.  # noqa: E501

        The date and time that the error occurred.  # noqa: E501

        :return: The error_date_time of this HttpErrorResponse.  # noqa: E501
        :rtype: str
        """
        return self._error_date_time

    @error_date_time.setter
    def error_date_time(self, error_date_time):
        """Sets the error_date_time of this HttpErrorResponse.

        The date and time that the error occurred.  # noqa: E501

        :param error_date_time: The error_date_time of this HttpErrorResponse.  # noqa: E501
        :type: str
        """

        self._error_date_time = error_date_time

    @property
    def message(self):
        """Gets the message of this HttpErrorResponse.  # noqa: E501

        A detailed message about the error.  # noqa: E501

        :return: The message of this HttpErrorResponse.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this HttpErrorResponse.

        A detailed message about the error.  # noqa: E501

        :param message: The message of this HttpErrorResponse.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def requested_method(self):
        """Gets the requested_method of this HttpErrorResponse.  # noqa: E501

        The HTTP request method used for the current request.  # noqa: E501

        :return: The requested_method of this HttpErrorResponse.  # noqa: E501
        :rtype: str
        """
        return self._requested_method

    @requested_method.setter
    def requested_method(self, requested_method):
        """Sets the requested_method of this HttpErrorResponse.

        The HTTP request method used for the current request.  # noqa: E501

        :param requested_method: The requested_method of this HttpErrorResponse.  # noqa: E501
        :type: str
        """

        self._requested_method = requested_method

    @property
    def requested_url(self):
        """Gets the requested_url of this HttpErrorResponse.  # noqa: E501

        The URL for the current request.  # noqa: E501

        :return: The requested_url of this HttpErrorResponse.  # noqa: E501
        :rtype: str
        """
        return self._requested_url

    @requested_url.setter
    def requested_url(self, requested_url):
        """Sets the requested_url of this HttpErrorResponse.

        The URL for the current request.  # noqa: E501

        :param requested_url: The requested_url of this HttpErrorResponse.  # noqa: E501
        :type: str
        """

        self._requested_url = requested_url

    @property
    def transaction_id(self):
        """Gets the transaction_id of this HttpErrorResponse.  # noqa: E501

        A unique identifier for the current request.  # noqa: E501

        :return: The transaction_id of this HttpErrorResponse.  # noqa: E501
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this HttpErrorResponse.

        A unique identifier for the current request.  # noqa: E501

        :param transaction_id: The transaction_id of this HttpErrorResponse.  # noqa: E501
        :type: str
        """

        self._transaction_id = transaction_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HttpErrorResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HttpErrorResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HttpErrorResponse):
            return True

        return self.to_dict() != other.to_dict()
