# coding: utf-8

"""
    Trip Planner

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 10.2.1.42
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TripRequestResponseJourneyLegProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'different_fares': 'str',
        'plan_low_floor_vehicle': 'str',
        'plan_wheel_chair_access': 'str',
        'line_type': 'str',
        'vehicle_access': 'list[str]'
    }

    attribute_map = {
        'different_fares': 'DIFFERENT_FARES',
        'plan_low_floor_vehicle': 'PlanLowFloorVehicle',
        'plan_wheel_chair_access': 'PlanWheelChairAccess',
        'line_type': 'lineType',
        'vehicle_access': 'vehicleAccess'
    }

    def __init__(self, different_fares=None, plan_low_floor_vehicle=None, plan_wheel_chair_access=None, line_type=None, vehicle_access=None, _configuration=None):  # noqa: E501
        """TripRequestResponseJourneyLegProperties - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._different_fares = None
        self._plan_low_floor_vehicle = None
        self._plan_wheel_chair_access = None
        self._line_type = None
        self._vehicle_access = None
        self.discriminator = None

        if different_fares is not None:
            self.different_fares = different_fares
        if plan_low_floor_vehicle is not None:
            self.plan_low_floor_vehicle = plan_low_floor_vehicle
        if plan_wheel_chair_access is not None:
            self.plan_wheel_chair_access = plan_wheel_chair_access
        if line_type is not None:
            self.line_type = line_type
        if vehicle_access is not None:
            self.vehicle_access = vehicle_access

    @property
    def different_fares(self):
        """Gets the different_fares of this TripRequestResponseJourneyLegProperties.  # noqa: E501

        XXX  # noqa: E501

        :return: The different_fares of this TripRequestResponseJourneyLegProperties.  # noqa: E501
        :rtype: str
        """
        return self._different_fares

    @different_fares.setter
    def different_fares(self, different_fares):
        """Sets the different_fares of this TripRequestResponseJourneyLegProperties.

        XXX  # noqa: E501

        :param different_fares: The different_fares of this TripRequestResponseJourneyLegProperties.  # noqa: E501
        :type: str
        """

        self._different_fares = different_fares

    @property
    def plan_low_floor_vehicle(self):
        """Gets the plan_low_floor_vehicle of this TripRequestResponseJourneyLegProperties.  # noqa: E501

        This indicates whether or not the vehicle is wheelchair accessible.  # noqa: E501

        :return: The plan_low_floor_vehicle of this TripRequestResponseJourneyLegProperties.  # noqa: E501
        :rtype: str
        """
        return self._plan_low_floor_vehicle

    @plan_low_floor_vehicle.setter
    def plan_low_floor_vehicle(self, plan_low_floor_vehicle):
        """Sets the plan_low_floor_vehicle of this TripRequestResponseJourneyLegProperties.

        This indicates whether or not the vehicle is wheelchair accessible.  # noqa: E501

        :param plan_low_floor_vehicle: The plan_low_floor_vehicle of this TripRequestResponseJourneyLegProperties.  # noqa: E501
        :type: str
        """

        self._plan_low_floor_vehicle = plan_low_floor_vehicle

    @property
    def plan_wheel_chair_access(self):
        """Gets the plan_wheel_chair_access of this TripRequestResponseJourneyLegProperties.  # noqa: E501

        This indicates whether or not the stop is wheelchair accessible.  # noqa: E501

        :return: The plan_wheel_chair_access of this TripRequestResponseJourneyLegProperties.  # noqa: E501
        :rtype: str
        """
        return self._plan_wheel_chair_access

    @plan_wheel_chair_access.setter
    def plan_wheel_chair_access(self, plan_wheel_chair_access):
        """Sets the plan_wheel_chair_access of this TripRequestResponseJourneyLegProperties.

        This indicates whether or not the stop is wheelchair accessible.  # noqa: E501

        :param plan_wheel_chair_access: The plan_wheel_chair_access of this TripRequestResponseJourneyLegProperties.  # noqa: E501
        :type: str
        """

        self._plan_wheel_chair_access = plan_wheel_chair_access

    @property
    def line_type(self):
        """Gets the line_type of this TripRequestResponseJourneyLegProperties.  # noqa: E501

        XXX seen a value of SUPPLEMENT for ferry route   # noqa: E501

        :return: The line_type of this TripRequestResponseJourneyLegProperties.  # noqa: E501
        :rtype: str
        """
        return self._line_type

    @line_type.setter
    def line_type(self, line_type):
        """Sets the line_type of this TripRequestResponseJourneyLegProperties.

        XXX seen a value of SUPPLEMENT for ferry route   # noqa: E501

        :param line_type: The line_type of this TripRequestResponseJourneyLegProperties.  # noqa: E501
        :type: str
        """

        self._line_type = line_type

    @property
    def vehicle_access(self):
        """Gets the vehicle_access of this TripRequestResponseJourneyLegProperties.  # noqa: E501

        This value is not currently in use.  # noqa: E501

        :return: The vehicle_access of this TripRequestResponseJourneyLegProperties.  # noqa: E501
        :rtype: list[str]
        """
        return self._vehicle_access

    @vehicle_access.setter
    def vehicle_access(self, vehicle_access):
        """Sets the vehicle_access of this TripRequestResponseJourneyLegProperties.

        This value is not currently in use.  # noqa: E501

        :param vehicle_access: The vehicle_access of this TripRequestResponseJourneyLegProperties.  # noqa: E501
        :type: list[str]
        """

        self._vehicle_access = vehicle_access

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TripRequestResponseJourneyLegProperties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TripRequestResponseJourneyLegProperties):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TripRequestResponseJourneyLegProperties):
            return True

        return self.to_dict() != other.to_dict()
