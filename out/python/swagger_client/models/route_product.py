# coding: utf-8

"""
    Trip Planner

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 10.2.1.42
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class RouteProduct(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_class': 'int',
        'icon_id': 'int',
        'name': 'str'
    }

    attribute_map = {
        '_class': 'class',
        'icon_id': 'iconId',
        'name': 'name'
    }

    def __init__(self, _class=None, icon_id=None, name=None, _configuration=None):  # noqa: E501
        """RouteProduct - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self.__class = None
        self._icon_id = None
        self._name = None
        self.discriminator = None

        if _class is not None:
            self._class = _class
        if icon_id is not None:
            self.icon_id = icon_id
        if name is not None:
            self.name = name

    @property
    def _class(self):
        """Gets the _class of this RouteProduct.  # noqa: E501

        This field indicates the type of the route, using the same values as elsewhere in this API.  * `1`: Train * `2`: Metro * `4`: Light Rail * `5`: Bus * `7`: Coach * `9`: Ferry * `11`: School Bus * `99`: Walking * `100`: Walking (Footpath) * `101`: Bicycle * `102`: Take Bicycle On Public Transport * `103`: Kiss & Ride * `104`: Park & Ride * `105`: Taxi * `106`: Car   # noqa: E501

        :return: The _class of this RouteProduct.  # noqa: E501
        :rtype: int
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this RouteProduct.

        This field indicates the type of the route, using the same values as elsewhere in this API.  * `1`: Train * `2`: Metro * `4`: Light Rail * `5`: Bus * `7`: Coach * `9`: Ferry * `11`: School Bus * `99`: Walking * `100`: Walking (Footpath) * `101`: Bicycle * `102`: Take Bicycle On Public Transport * `103`: Kiss & Ride * `104`: Park & Ride * `105`: Taxi * `106`: Car   # noqa: E501

        :param _class: The _class of this RouteProduct.  # noqa: E501
        :type: int
        """

        self.__class = _class

    @property
    def icon_id(self):
        """Gets the icon_id of this RouteProduct.  # noqa: E501

        This field is used by to determine which icon to use when displaying this affected route. It will typically match up with the `class` value.   # noqa: E501

        :return: The icon_id of this RouteProduct.  # noqa: E501
        :rtype: int
        """
        return self._icon_id

    @icon_id.setter
    def icon_id(self, icon_id):
        """Sets the icon_id of this RouteProduct.

        This field is used by to determine which icon to use when displaying this affected route. It will typically match up with the `class` value.   # noqa: E501

        :param icon_id: The icon_id of this RouteProduct.  # noqa: E501
        :type: int
        """

        self._icon_id = icon_id

    @property
    def name(self):
        """Gets the name of this RouteProduct.  # noqa: E501

        Name of the product  # noqa: E501

        :return: The name of this RouteProduct.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RouteProduct.

        Name of the product  # noqa: E501

        :param name: The name of this RouteProduct.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RouteProduct, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RouteProduct):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RouteProduct):
            return True

        return self.to_dict() != other.to_dict()
